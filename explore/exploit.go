package main

import (
    "io"
    "log"
    "net"
	"fmt"
    "golang.org/x/crypto/ssh"
	"github.com/zach-klippenstein/goadb"
)

var (
    username         = "kristi"
    password         = "Kr1sT!5h@Rp3xPl0r3!"
    serverAddrString = "10.10.10.247:2222"
    localAddrString  = "localhost:5555"
    remoteAddrString = "localhost:5555"
)

func forward(localConn net.Conn, config *ssh.ClientConfig) {
    // Setup sshClientConn (type *ssh.ClientConn)
    sshClientConn, err := ssh.Dial("tcp", serverAddrString, config)
    if err != nil {
        log.Fatalf("ssh.Dial failed: %s", err)
    }

    // Setup sshConn (type net.Conn)
    sshConn, err := sshClientConn.Dial("tcp", remoteAddrString)

    // Copy localConn.Reader to sshConn.Writer
    go func() {
        _, err = io.Copy(sshConn, localConn)
        if err != nil {
            log.Fatalf("io.Copy failed: %v", err)
        }
    }()

    // Copy sshConn.Reader to localConn.Writer
    go func() {
        _, err = io.Copy(localConn, sshConn)
        if err != nil {
            log.Fatalf("io.Copy failed: %v", err)
        }
    }()
}

func connect(localConn net.Conn) {
	client, err := adb.New()
	if err != nil {
		log.Fatal("adb new failed: %v", err)
	}

	err = client.Connect("localhost", 5555)
	if err != nil {
		log.Fatalf("adb connect failed: %v", err)
	}
	fmt.Println("connected")
	client.ListDevices()
}

func main() {
    // Setup SSH config (type *ssh.ClientConfig)
    config := &ssh.ClientConfig{
        User: username,
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
        Auth: []ssh.AuthMethod{
            ssh.Password(password),
        },
    }

    // Setup localListener (type net.Listener)
    localListener, err := net.Listen("tcp", localAddrString)
    if err != nil {
        log.Fatalf("net.Listen failed: %v", err)
    }

    for {
        // Setup localConn (type net.Conn)
		fmt.Println("attempting to create tunnel")
        localConn, err := localListener.Accept()
        if err != nil {
            log.Fatalf("listen.Accept failed: %v", err)
        }
        go forward(localConn, config)
		fmt.Println("ssh tunnel created")
		go connect(localConn)
    }
}



